// <auto-generated />
using System;
using Licitacao.Infraestructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Licitacao.Infraestructure.Migrations
{
    [DbContext(typeof(LicitacaoContext))]
    [Migration("20241031185452_NewColunmNeFisco")]
    partial class NewColunmNeFisco
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Licitacao.Domain.Entities.CotacaoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Fonte")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Fornecedor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("LoteId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("LoteId");

                    b.ToTable("Cotacoes");
                });

            modelBuilder.Entity("Licitacao.Domain.Entities.InternetEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Fonte")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("LoteId")
                        .HasColumnType("char(36)");

                    b.Property<string>("NomeTabela")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LoteId");

                    b.ToTable("Internets");
                });

            modelBuilder.Entity("Licitacao.Domain.Entities.LoteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Descricao")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Item")
                        .HasColumnType("int");

                    b.Property<int>("NeFisco")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<string>("UnidadeMedida")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Lotes");
                });

            modelBuilder.Entity("Licitacao.Domain.Entities.PrecoEstimadoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("LoteId")
                        .HasColumnType("char(36)");

                    b.Property<string>("MetodologiaCalculo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("ValorTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorUnitario")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("LoteId");

                    b.ToTable("PrecosEstimados");
                });

            modelBuilder.Entity("Licitacao.Domain.Entities.PrecoPublicoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Fonte")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Fornecedor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("LoteId")
                        .HasColumnType("char(36)");

                    b.Property<int>("TipoDocumento")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LoteId");

                    b.ToTable("PrecosPublicos");
                });

            modelBuilder.Entity("Licitacao.Domain.Entities.CotacaoEntity", b =>
                {
                    b.HasOne("Licitacao.Domain.Entities.LoteEntity", "Lote")
                        .WithMany("Cotacoes")
                        .HasForeignKey("LoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lote");
                });

            modelBuilder.Entity("Licitacao.Domain.Entities.InternetEntity", b =>
                {
                    b.HasOne("Licitacao.Domain.Entities.LoteEntity", "Lote")
                        .WithMany("Internets")
                        .HasForeignKey("LoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lote");
                });

            modelBuilder.Entity("Licitacao.Domain.Entities.PrecoEstimadoEntity", b =>
                {
                    b.HasOne("Licitacao.Domain.Entities.LoteEntity", "Lote")
                        .WithMany("PrecosEstimados")
                        .HasForeignKey("LoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lote");
                });

            modelBuilder.Entity("Licitacao.Domain.Entities.PrecoPublicoEntity", b =>
                {
                    b.HasOne("Licitacao.Domain.Entities.LoteEntity", "Lote")
                        .WithMany("PrecosPublicos")
                        .HasForeignKey("LoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lote");
                });

            modelBuilder.Entity("Licitacao.Domain.Entities.LoteEntity", b =>
                {
                    b.Navigation("Cotacoes");

                    b.Navigation("Internets");

                    b.Navigation("PrecosEstimados");

                    b.Navigation("PrecosPublicos");
                });
#pragma warning restore 612, 618
        }
    }
}
